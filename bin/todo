#!/usr/bin/node

const VERSION = "1.0.1";
const fs = require("fs");
const crypto = require("crypto");
const readline = require("readline");
const os = require("os");
const path = require("path");

class Todo {
  /**
   * Initializes a new instance of the Todo class.
   * @param {string} [filePath='tasks.json'] - The name of the tasks file.
   */
  constructor(filePath = "tasks.json") {
    const configDir = path.join(os.homedir(), ".config", "todo");
    this.filePath = path.join(configDir, filePath);

    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
    }

    this.statuses = [
      { id: 1, name: "todo", label: "Todo" },
      { id: 2, name: "done", label: "Done" },
      { id: 3, name: "in-progress", label: "In Progress" },
    ];
    this.tasks = this.loadTasks();
  }

  /**
   * Loads tasks from the file.
   * @returns {Array<Object>} The array of tasks.
   */
  loadTasks() {
    try {
      const data = fs.readFileSync(this.filePath, "utf-8");
      return JSON.parse(data);
    } catch (error) {
      return [];
    }
  }

  filterTasks(filter) {
    const { field, value } = filter;
    try {
      return this.tasks.filter((items) => items[field] === value);
    } catch (_err) {
      return [];
    }
  }

  /**
   * Saves the current tasks to the file.
   */
  saveTasks() {
    fs.writeFileSync(this.filePath, JSON.stringify(this.tasks, null, 2));
  }

  /**
   * Adds a new task to the list and saves it.
   * @param {Object} task - The task to add.
   */
  add(task) {
    this.tasks.push(task);
    this.saveTasks();
    console.log(`Added task: ${task.title}`);
  }

  /**
   * Finds a task by a partial ID prefix.
   * @param {string} idPrefix - The ID prefix to search for.
   * @returns {Object|null} The matched task, or null if not found or ambiguous.
   */
  findTaskByIdPrefix(idPrefix) {
    if (typeof idPrefix !== "string") {
      console.log(`Provided ID prefix must be a string.`);
      return null;
    }

    const matches = this.tasks.filter((task) => task.id.startsWith(idPrefix));

    if (matches.length === 0) {
      console.log(`No task found with ID starting with: ${idPrefix}`);
      return null;
    }
    if (matches.length > 1) {
      console.log(`Multiple tasks found with ID starting with: ${idPrefix}`);
      return null;
    }

    return matches[0];
  }

  /**
   * Deletes a task by ID prefix and saves changes.
   * @param {string} idPrefix - The ID prefix of the task to delete.
   */
  delete(idPrefix) {
    const task = this.findTaskByIdPrefix(idPrefix);
    if (task) {
      this.tasks = this.tasks.filter((t) => t.id !== task.id);
      this.saveTasks();
      console.log(`Deleted task with ID: ${task.id}`);
    }
  }

  /**
   * Updates a task by ID prefix with provided fields.
   * @param {string} idPrefix - The ID prefix of the task to update.
   * @param {Object} updatedFields - The fields to update in the task.
   */
  update(idPrefix, updatedFields) {
    const task = this.findTaskByIdPrefix(idPrefix);
    if (task) {
      Object.assign(task, updatedFields);
      this.saveTasks();
      console.log(`Updated task with ID: ${task.id}`);
    }
  }

  /**
   * Displays detailed information about a task, with a status icon.
   *
   * @param {string} idPrefix - The unique prefix of the task ID to view.
   */
  detail(idPrefix) {
    const task = this.findTaskByIdPrefix(idPrefix);
    if (task) {
      // Set the appropriate status icon
      let statusIcon = "[]"; // Default icon for "todo"
      if (task.status === "in-progress") statusIcon = "[]";
      else if (task.status === "done") statusIcon = "[]";

      console.log(`\nTask Details:\n-------------`);
      console.log(`ID         : ${task.id}`);
      console.log(`Title      : ${task.title}`);
      console.log(`Description: ${task.description}`);
      console.log(`Due Date   : ${new Date(task.due).toLocaleString()}`);
      console.log(
        `Status     : ${statusIcon} ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`
      );
      console.log(`-------------\n`);
    }
  }

  /**
   * Marks a task as done by ID prefix.
   * @param {string} idPrefix - The ID prefix of the task to mark as done.
   */
  finish(idPrefix) {
    this.update(idPrefix, { status: "done" });
  }

  /**
   * Lists all tasks with their status and title.
   */
  list() {
    console.log("Tasks:");
    this.tasks.forEach((task) => {
      let statusMark = "[]"; // Default marker for "todo"
      if (task.status === "in-progress") statusMark = "[]";
      else if (task.status === "done") statusMark = "[]";
      console.log(`${statusMark} ID: ${task.id}, Title: ${task.title}`);
    });
  }
  printVersion() {
    console.log(`TODO node CLI, version ${VERSION}`);
  }
}

// Setup for reading user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const todo = new Todo();

/**
 * Prompts the user to create a new task and adds it to the list.
 */
function createTask() {
  rl.question("Enter task title: ", (title) => {
    rl.question("Enter task description: ", (description) => {
      const hash = crypto
        .createHash("sha1")
        .update(Date.now().toString())
        .digest("hex");
      const newTask = {
        id: hash,
        title,
        description: description || null,
        due: new Date(),
        status: "todo",
      };
      todo.add(newTask);
      rl.close();
    });
  });
}

// Handle command-line arguments
const command = process.argv[2];
const arg = process.argv[3];

switch (command) {
  case "-a":
  case "--add":
    createTask();
    break;
  case "-d":
  case "--delete":
    if (arg) {
      todo.delete(arg);
    } else {
      console.log("Please provide a task ID to delete.");
    }
    rl.close();
    break;
  case "-f":
  case "--finish":
    if (arg) {
      todo.finish(arg);
    } else {
      console.log("Please provide a task ID to mark as done.");
    }
    rl.close();
    break;
  case "-l":
  case "--list":
    todo.list();
    rl.close();
    break;
  case "-e":
  case "--detail":
    if (arg) {
      todo.detail(arg);
    } else {
      console.log("Please provide a task ID to view.");
    }
    rl.close();
    break;
  case "-v":
  case "--version":
    todo.printVersion();
    rl.close();
    break;
  default:
    console.log("Usage: todo <command> [args]");
    console.log("Commands:");
    console.log("  -a | --add           - Add a new task");
    console.log("  -d | --delete <id>   - Delete a task by ID");
    console.log("  -f | --finish <id>   - Mark a task as done by ID");
    console.log("  -l | --list          - List all tasks");
    console.log("  -e | --detail <id>   - View task details");
    console.log("  -v | --version       - View version number");
    rl.close();
}
